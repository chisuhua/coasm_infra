// generator/templates/coasm.g4.tpl
// Template for COASM ANTLR4 Grammar
// Generated by coasm_infra.generator from ISAModel

grammar coasm;

prog: line* EOF ;

line
    : directive line_comment? NEWLINE?             # DirectiveLine
    | label line_comment? NEWLINE?                 # LabelLine
    | label? instruction line_comment? NEWLINE?    # InstructionLine
    | block line_comment? NEWLINE?                 # BlockLine
    | line_comment NEWLINE?                        # CommentLine
    | NEWLINE                                      # EmptyLine
    ;

directive
    : section_directive
    | START_KERNEL IDENTIFIER
    | kernel_metadata_start
    | kernel_metadata_item
    | COASM_VERSION_DIRECTIVE
    | VERSION_NUMBER INTEGER_LITERAL
    ;

section_directive
    : TEXT_DIRECTIVE
    | GLOBAL_DIRECTIVE IDENTIFIER
    | TYPE_DIRECTIVE IDENTIFIER ',' TYPE_ATTR
    ;

kernel_metadata_start
    : COASM_KERNELS_DIRECTIVE
    ;

kernel_metadata_item
    : DASH NEWLINE (metadata_entry_line)+
    ;

metadata_entry_line
    : WHITESPACE? metadata_key ':' (WHITESPACE metadata_value)? NEWLINE
    ;

metadata_key: IDENTIFIER ;
metadata_value: IDENTIFIER | INTEGER_LITERAL | STRING_LITERAL | HEX_LITERAL | FLOAT_LITERAL ;

label: IDENTIFIER ':' ;

block: LEFT_BRACE (line)* RIGHT_BRACE ;

instruction: OPCODE (instruction_suffix)? (operands)? ;

instruction_suffix: DOT IDENTIFIER ; // e.g., .u32, .f32

operands: operand (COMMA operand)* ;

operand
    : REGISTER              # RegisterOperand
    | SPECIAL_REGISTER      # SpecialRegisterOperand
    | immediate             # ImmediateOperand
    | memory_operand        # MemoryOperand
    | IDENTIFIER            # IdentifierOperand // For labels in branches
    ;

immediate: INTEGER_LITERAL | HEX_LITERAL | FLOAT_LITERAL ;
memory_operand: LEFT_BRACKET memory_address RIGHT_BRACKET ;
memory_address: operand (PLUS operand)* ; // Simplified


// --- Lexer Rules (Tokens) ---

// Keywords and Symbols based on coasm.md examples
TEXT_DIRECTIVE: '.text' ;
GLOBAL_DIRECTIVE: '.global' ;
TYPE_DIRECTIVE: '.type' ;
START_KERNEL: '.start_kernel' ;
COASM_KERNELS_DIRECTIVE: 'opu.kernels:' ;
COASM_VERSION_DIRECTIVE: 'opu.version:' ;
VERSION_NUMBER: '-' ;
DASH: '-' ;
WHITESPACE: [ \t]+ ;
SHARED_MEMSIZE: '.shared_memsize' ;
PRIVATE_MEMSIZE: '.private_memsize' ;
CMEM_SIZE: '.cmem_size' ;
BAR_USED: '.bar_used' ;
KERNEL_CTRL: '.kernel_ctrl' ;
KERNEL_MODE: '.kernel_mode' ;
LOCAL_FRAMESIZE: '.local_framesize' ;
NAME: '.name' ;
ARGS: '.args' ;
SHARED: '.shared' ;
ADDRESS_SPACE: '.address_space' ;
OFFSET: '.offset' ;
SIZE: '.size' ;
VALUE_KIND: '.value_kind' ;
ARGS_START : '.args:' ;
SHARED_START : '.shared:' ;
ARG_NAME_DIRECTIVE : '.name' ; // Reused
SHARED_NAME_DIRECTIVE : '.name' ; // Reused
ADDRESS_SPACE_TYPE : 'global' | 'shared' | 'local' | 'param' ;
VALUE_KIND_TYPE : 'global_buffer' | 'shared_memory' | 'local_memory' | 'parameter' ;

// --- Instructions (Generated from ISAModel) ---
// The OPCODE lexer rule is generated by coasm_infra.generator
// It will replace {{ instructions_placeholder }} with
// 'ADD' | 'MUL' | 'LD' | 'ST' | 'MOV' | ...
OPCODE: {{ instructions_placeholder }} ;

// --- Registers (Based on PtxTranslator discussion) ---
REGISTER: PERCENT IDENTIFIER_PART ;
SPECIAL_REGISTER: PERCENT (IDENTIFIER_PART '.')+ IDENTIFIER_PART ;

// --- Identifiers and Literals ---
fragment IDENTIFIER_PART: [a-zA-Z_$][a-zA-Z_$0-9]* ;
IDENTIFIER: IDENTIFIER_PART ;
STRING_LITERAL: '"' (~["\\\r\n] | EscapeSequence)* '"' ;
fragment EscapeSequence: '\\' [btnfr"'\\] | UNICODE_ESCAPE | OCTAL_ESCAPE ;
fragment UNICODE_ESCAPE: '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT ;
fragment OCTAL_ESCAPE: '\\' [0-7] [0-7]? [0-7]? ;
fragment HEX_DIGIT: [0-9a-fA-F] ;

INTEGER_LITERAL: SIGN? [0-9]+ ;
HEX_LITERAL: '0' [xX] [0-9a-fA-F]+ ;
FLOAT_LITERAL: SIGN? [0-9]* '.' [0-9]+ ([eE] SIGN? [0-9]+)? ;
SIGN: [+-] ;

// --- Symbols and Punctuation ---
PERCENT: '%' ;
DOT: '.' ;
COLON: ':' ;
COMMA: ',' ;
LEFT_BRACKET: '[' ;
RIGHT_BRACKET: ']' ;
LEFT_BRACE: '{' ;
RIGHT_BRACE: '}' ;
PLUS: '+' ;
MINUS: '-' ;
AT_SYMBOL: '@' ;
TYPE_ATTR: AT_SYMBOL FUNCTION_KEYWORD ;
FUNCTION_KEYWORD: 'function' ;
SEMICOLON: ';' ;

// --- Comments and Whitespace ---
line_comment : LINE_COMMENT ;
LINE_COMMENT : '//' ~[\r\n]* -> channel(HIDDEN) ;
BLOCK_COMMENT: '/*' .*? '*/' -> channel(HIDDEN) ;
NEWLINE : '\r'? '\n' -> skip ;
WS : [ \t]+ -> skip ;
