// generator/templates/coasm.g4.tpl
// Template for COASM ANTLR4 Grammar
// Generated by coasm_infra.generator from ISAModel

grammar coasm;

// --- Parser Rules (Modified for Multi-Kernel Support) ---

/**
 * 程序的顶层结构：可以包含多个指令、标签、内核定义、指令块、元数据块等。
 * 现在允许多个 kernel 定义和多个元数据块交替或混合出现。
 */
prog: (topLevelElement)* EOF ;

/**
 * 顶层元素：指令行、标签行、内核定义、指令块、元数据块、版本信息、注释行、空行。
 */
topLevelElement
    : line                             # LineElement
    | kernelDefinition                 # KernelElement // New: Dedicated kernel definition rule
    | kernelMetadataBlock              # KernelMetadataElement // New: Dedicated metadata block rule
    | coasmVersionDirective            # VersionElement // New: Dedicated version directive rule
    | line_comment NEWLINE?            # CommentElement
    | NEWLINE                          # EmptyElement
    ;

/**
 * 一行内容：可以是指令行、标签行、指令块行、注释行或空行。
 * 保持原有的灵活性，用于内核内部的指令。
 */

line
    : directive line_comment? NEWLINE?             # DirectiveLine
    | label line_comment? NEWLINE?                 # LabelLine
    | label? instruction line_comment? NEWLINE?    # InstructionLine
    | block line_comment? NEWLINE?                 # BlockLine
    // | line_comment NEWLINE?                        # CommentLine
    // | NEWLINE                                      # EmptyLine
    ;

directive
    : section_directive
    | START_KERNEL IDENTIFIER // Legacy/Directive form (if still needed)
    | kernel_metadata_start
    | kernel_metadata_item
    | COASM_VERSION_DIRECTIVE // Legacy/Directive form (if still needed)
    | VERSION_NUMBER INTEGER_LITERAL // Legacy/Directive form (if still needed)
    ;

section_directive
    : TEXT_DIRECTIVE
    | GLOBAL_DIRECTIVE IDENTIFIER
    | TYPE_DIRECTIVE IDENTIFIER ',' TYPE_ATTR
    ;

kernelDefinition
    : kernelDeclaration kernelBody kernelMetadataBlock? // 元数据块是可选的，紧跟在主体后
    ;

kernelDeclaration
    : VISIBLE? ENTRY? IDENTIFIER // 内核名 (例如 _Z9vectorAddPfS_S_i)
    LeftParen paramList? RightParen // 参数列表 (例如 .param .u64 param_a, .param .u64 param_b)
    ;

paramList
    : param (COMMA param)*
    ;

param
    : PARAM (ALIGN DIGITS)? qualifier+ IDENTIFIER (LeftBracket DIGITS RightBracket)? // .param .u64 param_a 或 .param .u32 param_b[10]
    ;

kernelBody
    : LeftBrace (line)* RightBrace // 内核主体由大括号包围的指令行组成
    ;

kernelMetadataBlock
    : COASM_KERNELS_DIRECTIVE NEWLINE (DASH NEWLINE kernelMetadataItemLine+)+ // 至少一个内核元数据项
    ;

kernelMetadataItemLine
    : WHITESPACE? metadataKey ':' (WHITESPACE metadataValue)? NEWLINE
    ;

metadataKey: IDENTIFIER ;
metadataValue: IDENTIFIER | INTEGER_LITERAL | STRING_LITERAL | HEX_LITERAL | FLOAT_LITERAL ;

coasmVersionDirective
    : COASM_VERSION_DIRECTIVE NEWLINE VERSION_NUMBER INTEGER_LITERAL NEWLINE VERSION_NUMBER INTEGER_LITERAL NEWLINE ELLIPSIS NEWLINE
    ;

label: IDENTIFIER ':' ;

block: LeftBrace (line)* RightBrace ;

instruction: OPCODE (instruction_suffix)? (operands)? ;

instruction_suffix: DOT IDENTIFIER ; // e.g., .u32, .f32

operands: operand (COMMA operand)* ;

operand
    : REGISTER              # RegisterOperand
    | SPECIAL_REGISTER      # SpecialRegisterOperand
    | immediate             # ImmediateOperand
    | memory_operand        # MemoryOperand
    | IDENTIFIER            # IdentifierOperand // For labels in branches
    ;

immediate: INTEGER_LITERAL | HEX_LITERAL | FLOAT_LITERAL ;
memory_operand: LeftBracket memory_address RightBracket ;
memory_address: operand (PLUS operand)* ; // Simplified


// --- Lexer Rules (Tokens) ---

// Keywords and Symbols based on coasm.md examples
TEXT_DIRECTIVE: '.text' ;
GLOBAL_DIRECTIVE: '.global' ;
TYPE_DIRECTIVE: '.type' ;
START_KERNEL: '.start_kernel' ;
VISIBLE: '.visible' ;
ENTRY: '.entry' ;
PARAM: '.param' ;
ALIGN: '.align' ;
KERNEL: '.kernel' ; // 如果需要显式的 .kernel 指令

COASM_KERNELS_DIRECTIVE: 'opu.kernels:' ;
COASM_VERSION_DIRECTIVE: 'opu.version:' ;
VERSION_NUMBER: '-' ;
DASH: '-' ;
WHITESPACE: [ \t]+ ;
SHARED_MEMSIZE: '.shared_memsize' ;
PRIVATE_MEMSIZE: '.private_memsize' ;
CMEM_SIZE: '.cmem_size' ;
BAR_USED: '.bar_used' ;
KERNEL_CTRL: '.kernel_ctrl' ;
KERNEL_MODE: '.kernel_mode' ;
LOCAL_FRAMESIZE: '.local_framesize' ;
NAME: '.name' ;
ARGS: '.args' ;
SHARED: '.shared' ;
ADDRESS_SPACE: '.address_space' ;
OFFSET: '.offset' ;
SIZE: '.size' ;
VALUE_KIND: '.value_kind' ;
ARGS_START : '.args:' ;
SHARED_START : '.shared:' ;
ARG_NAME_DIRECTIVE : '.name' ; // Reused
SHARED_NAME_DIRECTIVE : '.name' ; // Reused
ADDRESS_SPACE_TYPE : 'global' | 'shared' | 'local' | 'param' ;
VALUE_KIND_TYPE : 'global_buffer' | 'shared_memory' | 'local_memory' | 'parameter' ;

// --- Instructions (Generated from coasm_isa.dsl/md) ---
// The OPCODE lexer rule is generated by coasm_infra.generator
// It will replace {{ instructions_placeholder }} with
// 'ADD' | 'MUL' | 'LD' | 'ST' | 'MOV' | ...
OPCODE: {{ instructions_placeholder }} ;

// --- Registers (Based on PtxTranslator discussion) ---
REGISTER: PERCENT IDENTIFIER_PART ;
SPECIAL_REGISTER: PERCENT (IDENTIFIER_PART '.')+ IDENTIFIER_PART ;

// --- Identifiers and Literals ---
fragment IDENTIFIER_PART: [a-zA-Z_$][a-zA-Z_$0-9]* ;
IDENTIFIER: IDENTIFIER_PART ;
STRING_LITERAL: '"' (~["\\\r\n] | EscapeSequence)* '"' ;
fragment EscapeSequence: '\\' [btnfr"'\\] | UNICODE_ESCAPE | OCTAL_ESCAPE ;
fragment UNICODE_ESCAPE: '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT ;
fragment OCTAL_ESCAPE: '\\' [0-7] [0-7]? [0-7]? ;
fragment HEX_DIGIT: [0-9a-fA-F] ;

INTEGER_LITERAL: SIGN? [0-9]+ ;
HEX_LITERAL: '0' [xX] [0-9a-fA-F]+ ;
FLOAT_LITERAL: SIGN? [0-9]* '.' [0-9]+ ([eE] SIGN? [0-9]+)? ;
SIGN: [+-] ;

// --- Symbols and Punctuation ---
PERCENT: '%' ;
DOT: '.' ;
COLON: ':' ;
COMMA: ',' ;
LEFT_BRACKET: '[' ;
RIGHT_BRACKET: ']' ;
LEFT_BRACE: '{' ;
RIGHT_BRACE: '}' ;
PLUS: '+' ;
MINUS: '-' ;
AT_SYMBOL: '@' ;
TYPE_ATTR: AT_SYMBOL FUNCTION_KEYWORD ;
FUNCTION_KEYWORD: 'function' ;
SEMICOLON: ';' ;
ELLIPSIS: '...' ; // For opu.version: ...

// --- Comments and Whitespace ---
line_comment : LINE_COMMENT ;
LINE_COMMENT : '//' ~[\r\n]* -> channel(HIDDEN) ;
BLOCK_COMMENT: '/*' .*? '*/' -> channel(HIDDEN) ;
NEWLINE : '\r'? '\n' -> skip ;
WS : [ \t]+ -> skip ;
